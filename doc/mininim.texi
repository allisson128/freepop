\input texinfo  @c -*-texinfo-*-
@c
@c mininim.texi -- The MININIM Manual
@c
@c Copyright (C) 2016 Bruno Félix Rezende Ribeiro <oitofelix@gnu.org>
@c
@c Permission is granted to copy, distribute and/or modify this
@c document under the terms of the GNU Free Documentation License,
@c Version 1.3 or any later version published by the Free Software
@c Foundation; with no Invariant Sections.
@c
@c You should have received a copy of the GNU Free Documentation
@c License along with this program.  If not, see
@c <http://www.gnu.org/licenses/>.
@c

@c %**start of header
@setfilename mininim.info
@documentencoding UTF-8
@c @documentlanguage en_US
@firstparagraphindent insert
@footnotestyle end
@include release.texi
@settitle MININIM
@set manual
@set GNUphiThird
@defcodeindex fg
@defcodeindex bg
@defcodeindex ext
@defcodeindex opt
@syncodeindex fg cp
@syncodeindex bg cp
@syncodeindex ext cp
@syncodeindex ky cp
@syncodeindex opt cp
@c %**end of header





@include copying.texi





@c --- Info directory entry;
@dircategory Games
@direntry
* MININIM: (mininim).   The Advanced Prince of Persia Engine.
@end direntry





@c --- Info Top Node;
@ifnottex
@node Top
@top MININIM: The Advanced Prince of Persia Engine
@insertcopying
@end ifnottex





@c --- Title page;
@finalout
@titlepage
@title @value{package} @value{version}
@subtitle The Advanced Prince of Persia Engine (a childhood dream)
@sp 6
@center @image{mininim-figures/mininim,2in}
@author Bruno Félix Rezende Ribeiro <@email{oitofelix@@gnu.org}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage





@c --- Table of contents;
@contents





@c --- Preface;
@node Preface
@unnumbered Preface
@cindex preface
@cindex manifesto, MININIM
@cindex motivation, MININIM
@cindex origin, MININIM
@cindex name, MININIM
@cindex Jordan Mechner
@cindex Mechner, Jordan
@cindex childhood dream
@cindex dream childhood
@cindex Bruno Félix Rezende Ribeiro
@cindex oitofelix

@include description.texi






@c --- Constructions;
@node Constructions
@chapter Constructions
@cindex constructions

@cindex position
@cindex room
@cindex floor
@cindex place
@cindex con
@cindex screen
@cindex tile
Each @dfn{level} is comprised of @dfn{rooms}@footnote{The terminology
used for @dfn{rooms} in the original game is @dfn{screens}.}.  Each room
is comprised of three @dfn{floors}.  Each floor is comprised of 10
@dfn{places}.  Each place holds a @dfn{construction} (or @dfn{con} for
short).@footnote{The terminology used for @dfn{constructions} in the
original game is @dfn{tiles}.}  The following figure illustrates this
arrangement.

@center @image{mininim-figures/level-layout}

@cindex coordinates, level
@cindex level coordinates
Therefore, any given construction is uniquely identified within a level
by the coordinates of its place@footnote{The term @emph{place} is used
throughout the text to describe both the last coordinate of the triplet
and the world space the triplet refers to.  Also, often the term
@emph{place} is omitted and the text refers just to the construction
itself, implying a reference to its place, as in ``the left
construction'', meaning ``the construction one place to the left''.
Hopefully, these shouldn't be a source of ambiguity.}, which are defined
as the triplet @emph{room}, @emph{floor} and @emph{place}:
@math{(r,f,p)}.

@cindex construction foreground
@cindex foreground, construction
@cindex construction background
@cindex background, construction
@cindex construction extension
@cindex extension, construction
Constructions are comprised of three elements: @emph{foreground},
@emph{background} and @emph{extension}.  A @dfn{construction foreground}
is the physical part the kid interacts with.  Physical properties
determined by it are collision, hang and fall conditions, to name a few.
On the other hand, a @dfn{construction background} is the part that yet
visible, doesn't affect the kid in any way --- its sole purpose is
ornamental; torches and windows are examples of this.  A
@dfn{construction extension} is a modifier which tells how the con looks
or behaves.  For example, items and door opening states are both
expressed by them.  Any given construction can have only one extension.
The valid extensions are:

@table @dfn
@cindex con ext item
@cindex item, con ext
@item Item
This is a code indicating which item should be put on the construction.
Used by @code{FLOOR}.
@cindex con ext can't fall
@cindex can't fall, con ext
@item Can't fall
This is a boolean indicating whether the construction should ignore
fall conditions.  Used by @code{LOOSE_FLOOR}.
@cindex con ext event
@cindex event, con ext
@item Event
This is an integer indicating which door event the construction
triggers.  Used by @code{OPENER_FLOOR} and @code{CLOSER_FLOOR}.
@cindex con ext step
@cindex step, con ext
@item Step
This is an integer indicating in which state, of a progressive set of
configurations, a construction is in.  Used by dynamic constructions
that don't use other extension.
@cindex con ext design
@cindex design, con ext
@item Design
This is a code indicating which alternative graphical design should be
used to render the construction.  Used by carpet constructions.
@end table

@node Non-directed relative positioning
@section Non-directed relative positioning
@cindex non-directed relative positioning
@cindex relative positioning, non-directed
@cindex positioning, non-directed relative

In order to easily talk about the relations between constructions it's
necessary to define the @dfn{non-directed relative positioning} of a
given place to its adjacent ones.  Consider the place @emph{C}, which
has the coordinates @math{(r,f,p)}, and its 8 adjacent places, as shown
in the following figure.

@center @image{mininim-figures/relative-coordinates-non-directed}

@smallindentedblock
@center @abbr{@strong{TL}, top left} @abbr{@strong{T}, top} @abbr{@strong{TR}, top right} @abbr{@strong{L}, left} @abbr{@strong{C}, center}
@center @abbr{@strong{R}, right} @abbr{@strong{BL}, bottom left}, @abbr{@strong{B}, bottom} @abbr{@strong{BR}, bottom right}
@end smallindentedblock

Then we define the following mapping between names and coordinates:

@multitable @columnfractions .50 .50
@headitem Name @tab Coordinates
@item TL @tab @math{(r,f - 1,p - 1)}
@item T  @tab @math{(r,f - 1,p)}
@item TR @tab @math{(r,f - 1,p + 1)}
@item L @tab @math{(r,f,p - 1)}
@item C @tab @math{(r,f,p)}
@item R @tab @math{(r,f,p + 1)}
@item BL @tab @math{(r,f + 1,p - 1)}
@item B @tab @math{(r,f + 1,p)}
@item BR @tab @math{(r,f + 1,p + 1)}
@end multitable


@node Foregrounds
@section Foregrounds
@cindex construction foreground
@cindex foreground, construction

Construction foregrounds have physical properties that determine how
they behave in certain events and also how the kid is affected by the
interaction with them.

@table @dfn

@cindex strictly traversable
@cindex traversable, strictly
@item Strictly traversable
This property means that the construction can't support the kid
vertically at its bottom, thus he falls immediately when trying to rest
on it.  Notice that cons having this property can't be @emph{hangable}.

@cindex traversable
@item Traversable
This property means that the construction can't @emph{indefinitely}
support the kid vertically at its bottom, thus he @emph{eventually}
falls when trying to rest on it.  Notice that @emph{strictly
traversable} is a particular case of this.

@cindex collidable
@item Collidable
This property means that the construction prevents the kid from passing
through it horizontally, thus he collides (often recoiling from the
impact) when trying to do so.

@cindex semi-collidable
@item Semi-collidable
This property means that the construction is @emph{collidable} only
under certain circumstances.

@cindex hangable
@item Hangable
This property means that the kid can hang on the construction's bottom,
in case there is an @emph{strictly traversable} one at its side.

@cindex depressible
@item Depressible
This property means that the construction is sensible to pressure at its
top, thus some reaction is triggered when the kid exerts such pressure.

@cindex trap
@item Trap
This property means that the construction might harm the kid.

@cindex rigid
@item Rigid
This property means that the construction can't be smashed by a falling
one, thus that which falls stops at the rigid con's top.

@cindex dynamic
@item Dynamic
This property means that the construction has a set of distinct states
in which it can be in.  Such states matter for how the construction
looks and behaves.
@end table

It's possible that some of these properties may apply only under certain
conditions of the construction and/or the kid.

@subsection Floors
@cindex floors

@dfn{Floors} make the ground above constructions the kid stands on.  All
of them are @emph{hangable}, except for @code{NO_FLOOR}.

@multitable @columnfractions .19 .15 .15 .51
  @headitem Code @tab Dungeon @tab Palace @tab Notes

  @fgindex NO_FLOOR
  @item @code{NO_FLOOR}@footnote{The @dfn{no floor} con is called
  @dfn{empty} in the original game.}
  @tab
  @tab
  @tab This is an empty space.  This is @emph{strictly traversable} and
  uses no extension.

  @fgindex FLOOR
  @item @code{FLOOR}
  @tab @center @image{mininim-figures/d-floor}
  @tab @center @image{mininim-figures/p-floor}
  @tab This is a normal floor. This uses the @emph{item} extension.

  @fgindex BROKEN_FLOOR
  @item @code{BROKEN_FLOOR}@footnote{The @dfn{broken floor} is called
  @emph{debris} in the original game.}
  @tab @center @image{mininim-figures/d-broken-floor}
  @tab @center @image{mininim-figures/p-broken-floor}
  @tab As soon as a falling @code{LOOSE_FLOOR} encounters a @emph{rigid}
  construction, it disappears replacing the rigid con's top by a
  @code{BROKEN_FLOOR}.  In contrast, if it encounters a @emph{non-rigid}
  and @emph{non-traversable} construction, it disappears replacing that
  very con by a @code{BROKEN_FLOOR}.  Finally, if it encounters a
  @emph{non-rigid} but @emph{traversable} construction, it pass through,
  breaking over the con in case that is not @emph{strictly traversable}.
  This uses no extension.

  @fgindex SKELETON_FLOOR
  @item @code{SKELETON_FLOOR}
  @tab @center @image{mininim-figures/d-skeleton-floor}
  @tab @center @image{mininim-figures/p-skeleton-floor}
  @footnote{The original game has no palace version of the skeleton floor.}
  @tab This behaves like @code{FLOOR} but uses no extension.

  @fgindex LOOSE_FLOOR
  @item @code{LOOSE_FLOOR}@footnote{The @dfn{loose floor} is called
  @emph{loose board} in the original game.}
  @tab @center @image{mininim-figures/d-loose-floor}
  @tab @center @image{mininim-figures/p-loose-floor}
  @tab This is rendered as @code{FLOOR}, but shakes as the kid hits the
  ground, by falling (from above), or vertically jumping (from below).
  If the kid hits near enough it's released and falls.  It might harm
  the kid when falling over him.  This is @emph{traversable},
  @emph{depressible}, a @emph{trap}, @emph{dynamic} and uses the
  @emph{can't fall} extension.

  @fgindex SPIKES_FLOOR
  @item @code{SPIKES_FLOOR}
  @tab @center @image{mininim-figures/d-spikes-floor}
  @tab @center @image{mininim-figures/p-spikes-floor}
  @tab Spikes come out of it, killing the kid if he falls or steps too
  fast over it.  This is a @emph{trap}, @emph{dynamic} and uses the
  @emph{step} extension (ranging from 0 to 9).  This gets activated as
  soon as the kid is in the same room and place column, and in the same
  or higher floor without a wall in between.  Guards can activate this
  as well.

  @fgindex OPENER_FLOOR
  @item @code{OPENER_FLOOR}@footnote{The @dfn{opener floor} is called
  @emph{raise button} in the original game.}
  @tab @center @image{mininim-figures/d-opener-floor}
  @tab @center @image{mininim-figures/p-opener-floor}
  @tab This opens one or more doors.  This is @emph{depressible},
  @emph{dynamic} and uses the @emph{event} extension.

  @fgindex CLOSER_FLOOR
  @item @code{CLOSER_FLOOR}@footnote{The @dfn{closer floor} is called
  @emph{drop button} in the original game.}
  @tab @center @image{mininim-figures/d-closer-floor}
  @tab @center @image{mininim-figures/p-closer-floor}
  @tab  This closes one or more doors. This is @emph{depressible},
  @emph{dynamic} and uses the @emph{event} extension.

  @fgindex STUCK_FLOOR
  @item @code{STUCK_FLOOR}@footnote{The @dfn{stuck floor} is called
  @emph {stuck button} in the original game.}
  @tab @center @image{mininim-figures/d-stuck-floor}
  @tab @center @image{mininim-figures/p-stuck-floor}
  @tab This is rendered like a pressed @code{CLOSER_FLOOR}, but it can't
  be unpressed.  This uses no extension.

  @fgindex HIDDEN_FLOOR
  @item @code{HIDDEN_FLOOR}@footnote{The original game doesn't have a
  @code{HIDDEN_FLOOR} construction by itself.}
  @tab
  @tab
  @tab This is rendered as @code{NO_FLOOR}, but as soon as the kid
  presses it, it's replaced by @code{FLOOR}.  This is
  @emph{depressible} and uses no extension.
@end multitable

@subsection Pillars
@cindex pillars

@dfn{Pillars} are aesthetic supports for the constructions on the floor
above them.  All of them are @emph{hangable}, except for
@code{BIG_PILLAR_TOP}.  Pillars use no extension.

@multitable @columnfractions .25 .15 .15 .45
  @headitem Code @tab Dungeon @tab Palace @tab Notes

  @fgindex PILLAR
  @item @code{PILLAR}
  @tab @center @image{mininim-figures/d-pillar}
  @tab @center @image{mininim-figures/p-pillar}
  @tab This is @emph{rigid}.

  @fgindex BIG_PILLAR_TOP
  @item @code{BIG_PILLAR_TOP}
  @tab @center @image{mininim-figures/d-big-pillar-top}
  @tab @center @image{mininim-figures/p-big-pillar-top}
  @tab This should be placed above a @code{BIG_PILLAR_BOTTOM}.  This is
  @emph{strictly traversable} and @emph{rigid}.

  @fgindex BIG_PILLAR_BOTTOM
  @item @code{BIG_PILLAR_BOTTOM}
  @tab @center @image{mininim-figures/d-big-pillar-bottom}
  @tab @center @image{mininim-figures/p-big-pillar-bottom}
  @tab This should be placed below a @code{BIG_PILLAR_TOP}.

  @fgindex ARCH_BOTTOM
  @item @code{ARCH_BOTTOM}
  @tab @center @image{mininim-figures/d-arch-bottom}
  @tab @center @image{mininim-figures/p-arch-bottom}
  @tab This should be placed below an @code{ARCH_TOP_MID}.
@end multitable

@subsection Wall
@cindex wall

The @dfn{wall} is a solid construct that separates sections of the
level.  It's @emph{collidable}, @emph{rigid} and uses no extension.

@multitable @columnfractions .20 .40 .40
  @headitem Code @tab Dungeon @tab Palace

  @fgindex WALL
  @item @code{WALL}
  @tab @center @image{mininim-figures/d-wall}
  @tab @center @image{mininim-figures/p-wall}
@end multitable

@subsection Doors
@cindex doors

@dfn{Doors} are constructions that conditionally separate levels and
in-level sections.  Both door types are @emph{hangable}, @emph{dynamic}
and use the @emph{step} extension.  The extension determines the door
opening level, ranging from fully open (0) to fully closed.

@multitable @columnfractions .16 .20 .20 .44
  @headitem Code @tab Dungeon @tab Palace @tab Notes

  @fgindex DOOR
  @item @code{DOOR}@footnote{The @dfn{door} is called @emph{gate} in the
  original game.}
  @tab @center @image{mininim-figures/d-door}
  @tab @center @image{mininim-figures/p-door}
  @tab This is @emph{semi-collidable} at right, as the kid might pass or
  not through it depending on the difference of the grid tip height and
  kid's movement height.  This is @emph{rigid} and its @emph{step}
  extension range from 0 to 47.

  @fgindex LEVEL_DOOR
  @item @code{LEVEL_DOOR}@footnote{The @dfn{level door} is called simply
  @emph{exit} in the original game.  There it's divided into two
  constructions: @emph{exit left} and @emph{exit right}.}
  @tab @center @image{mininim-figures/d-level-door}
  @tab @center @image{mininim-figures/p-level-door}
  @tab Often the kid progress through levels entering these.  This can
  only be entered when fully open.  Its @emph{step} extension range from
  0 to 43.
@end multitable

@subsection Chopper
@cindex chopper

The @dfn{chopper}@footnote{The @dfn{chopper} is called @dfn{chomper} in
the original game.} can leave the kid in half.  It's a @emph{trap},
@emph{hangable at right}, @emph{rigid} and @emph{dynamic}.  It uses the
@emph{step} extension which range from 0 to 5 and 128 to 133 (bloody
counterpart).  With a @emph{step} of 0 or 128, it gets activated as soon
as the kid is in the same room and floor and there is no wall in
between.  It doesn't get activated by guards, but can kill them as well.
Other @emph{steps} make it permanently inactive.  The chopper nullifies
the @emph{hangable at left} property of its top construction.

@multitable @columnfractions .20 .40 .40
  @headitem Code @tab Dungeon @tab Palace

  @fgindex CHOPPER
  @item @code{CHOPPER}
  @tab @center @image{mininim-figures/d-chopper}
  @tab @center @image{mininim-figures/p-chopper}
@end multitable

@subsection Mirror
@cindex mirror

The @dfn{mirror} reflects the kid's image and prevents him from passing
trough, except if he is able to perform a running jump, whatever the
side.  It's @emph{semi-collidable} at left, @emph{hangable at right},
@emph{rigid} and uses no extension.  The mirror nullifies the
@emph{hangable at left} property of its top construction.

@multitable @columnfractions .20 .40 .40
  @headitem Code @tab Dungeon @tab Palace

  @fgindex MIRROR
  @item @code{MIRROR}
  @tab @center @image{mininim-figures/d-mirror}
  @tab @center @image{mininim-figures/p-mirror}
@end multitable

@subsection Carpets
@cindex carpets

@dfn{Carpets}@footnote{@dfn{Carpets} are called @emph{tapestry} in the
original game.} are ornamental constructions often placed over
@code{DOOR} cons.  They come in two flavors: @code{CARPET} and
@code{TCARPET}; the watershed difference being the @emph{traversable}
property, which the latter has but the former lacks.  Both are
@emph{collidable} at right, @emph{rigid} and make use of the
@emph{design} extension.  The @code{CARPET} construction is also
@emph{hangable at left}.  Also, carpets nullify the @emph{hangable at
left} property of their @emph{right} and @emph{top right} constructions.

@multitable @columnfractions .15 .2 .2 .45
  @headitem Code @tab Dungeon @tab Palace @tab Notes

  @fgindex TCARPET, CARPET_00
  @item @code{TCARPET}
  @tab @center @image{mininim-figures/d-tcarpet-00}
  @tab @center @image{mininim-figures/p-tcarpet-00}
  @tab These graphics are drawn for the @emph{design} @code{CARPET_00}.

  @fgindex TCARPET, CARPET_01
  @item @code{TCARPET}
  @tab @center @image{mininim-figures/d-tcarpet-01}
  @tab @center @image{mininim-figures/p-tcarpet-01}
  @tab These graphics are drawn for the @emph{design} @code{CARPET_01}.

  @fgindex TCARPET, ARCH_CARPET_RIGHT_00
  @item @code{TCARPET}
  @tab @center @image{mininim-figures/d-arch-tcarpet-right-00}
  @tab @center @image{mininim-figures/p-arch-tcarpet-right-00}
  @tab These graphics are drawn for the design
  @code{ARCH_CARPET_RIGHT_00}.  This is intended to end an arch.  This
  should be placed at right of an @code{ARCH_TOP_MID}.

  @fgindex TCARPET, ARCH_CARPET_RIGHT_01
  @item @code{TCARPET}
  @tab @center @image{mininim-figures/d-arch-tcarpet-right-01}
  @tab @center @image{mininim-figures/p-arch-tcarpet-right-01}
  @tab These graphics are drawn for the design
  @code{ARCH_CARPET_RIGHT_01}.  This is intended to end an arch.  This
  should be placed at right of an @code{ARCH_TOP_MID}.

  @fgindex TCARPET, ARCH_CARPET_LEFT
  @item @code{TCARPET}
  @tab @center @image{mininim-figures/d-arch-tcarpet-left}
  @tab @center @image{mininim-figures/p-arch-tcarpet-left}
  @tab These graphics are drawn for the design @code{ARCH_CARPET_LEFT}.
  This is intended to end an arch.  This should be placed two places to
  the left of an @code{ARCH_TOP_MID}.

  @fgindex CARPET, CARPET_00
  @item @code{CARPET}
  @tab @center @image{mininim-figures/d-carpet-00}
  @tab @center @image{mininim-figures/p-carpet-00}
  @tab These graphics are drawn for the @emph{design} @code{CARPET_00}.

  @fgindex CARPET, CARPET_01
  @item @code{CARPET}
  @tab @center @image{mininim-figures/d-carpet-01}
  @tab @center @image{mininim-figures/p-carpet-01}
  @tab These graphics are drawn for the @emph{design} @code{CARPET_01}.

  @fgindex CARPET, ARCH_CARPET_LEFT
  @item @code{CARPET}
  @tab @center @image{mininim-figures/d-arch-carpet-left}
  @tab @center @image{mininim-figures/p-arch-carpet-left}
  @tab These graphics are drawn for the design @code{ARCH_CARPET_LEFT}.
  This is intended to end an arch.  This should be placed two places to
  the left of an @code{ARCH_TOP_MID}.
@end multitable

@subsection Arches
@cindex arches

@dfn{Arches}@footnote{@dfn{Arches} are called @dfn{lattices} in the
original game.} are ornamental constructions that can be indefinitely
chained together to make a structure that spans several rooms across.
They are @emph{strictly traversable}, @emph{rigid} and use no extension.

@multitable @columnfractions .2 .15 .15 .5
  @headitem Code @tab Dungeon
  @footnote{In the original game there is no dungeon version of arches.}
 @tab Palace @tab Notes

  @fgindex ARCH_TOP_MID
  @item @code{ARCH_TOP_MID}
  @tab @center @image{mininim-figures/d-arch-top-mid}
  @tab @center @image{mininim-figures/p-arch-top-mid}
  @tab This should be placed above an @code{ARCH_BOTTOM} and at left of an
  @code{ARCH_TOP_LEFT}, at right of an @code{ARCH_TOP_RIGHT}, or next to
  an @code{ARCH_TOP_SMALL}.

  @fgindex ARCH_TOP_SMALL
  @item @code{ARCH_TOP_SMALL}
  @tab @center @image{mininim-figures/d-arch-top-small}
  @tab @center @image{mininim-figures/p-arch-top-small}
  @tab This should be placed in between two @code{ARCH_TOP_MID}.

  @fgindex ARCH_TOP_LEFT
  @item @code{ARCH_TOP_LEFT}
  @tab @center @image{mininim-figures/d-arch-top-left}
  @tab @center @image{mininim-figures/p-arch-top-left}
  @tab This should be placed at left of an @code{ARCH_TOP_RIGHT}.

  @fgindex ARCH_TOP_RIGHT
  @item @code{ARCH_TOP_RIGHT}
  @tab @center @image{mininim-figures/d-arch-top-right}
  @tab @center @image{mininim-figures/p-arch-top-right}
  @tab This should be placed at right of an @code{ARCH_TOP_LEFT}.
@end multitable

@node Backgrounds
@section Backgrounds
@cindex backgrounds

Any combination of construction background and foreground is allowed,
but be aware that some may simply not look right, or even not make a
difference at all (like a torch behind a wall).

@multitable @columnfractions .12 .2 .2 .48
  @headitem Code @tab Dungeon @tab Palace @tab Notes

  @bgindex NO_BRICKS
  @item @code{NO_BRICKS}
  @tab
  @tab
  @tab For the dungeon and palace this results in no graphics at all.

  @bgindex NO_BG
  @item @code{NO_BG}
  @tab
  @tab @center @image{mininim-figures/p-bricks-00}
  @tab For the dungeon this results in no graphics.  For the palace this
   results in the same graphics as @code{BRICKS_02}.

  @bgindex BRICKS_00
  @item @code{BRICKS_00}
  @tab @center @image{mininim-figures/d-bricks-00}
  @tab
  @tab For the palace this results in no graphics.

  @bgindex BRICKS_01
  @item @code{BRICKS_01}
  @tab @center @image{mininim-figures/d-bricks-01}
  @tab @center @image{mininim-figures/p-bricks-01}
  @tab For the palace this results in the same graphics as @code{BRICKS_03}

  @bgindex BRICKS_02
  @item @code{BRICKS_02}
  @tab @center @image{mininim-figures/d-bricks-02}
  @tab @center @image{mininim-figures/p-bricks-00}
  @tab For the palace this results in the same graphics as @code{NO_BG}.

  @bgindex BRICKS_03
  @item @code{BRICKS_03}
  @tab @center @image{mininim-figures/d-bricks-03}
  @tab @center @image{mininim-figures/p-bricks-01}
  @tab For the palace this results in the same graphics as @code{BRICKS_01}.

  @bgindex TORCH
  @item @code{TORCH}@footnote{The fire sprites are mirrored
  horizontally depending on the level coordinates the torch has.
  This is not so in the original game.}
  @tab @center @image{mininim-figures/d-torch}
  @tab @center @image{mininim-figures/p-torch}
  @tab

  @bgindex WINDOW
  @item @code{WINDOW}
  @tab @center @image{mininim-figures/d-window}
  @tab @center @image{mininim-figures/p-window}
  @tab

  @bgindex BALCONY
  @item @code{BALCONY}@footnote{The background stars are randomly
  positioned and animated.  In the original game, all balconies have
  non-animated white stars in fixed positions.}
  @tab @center @image{mininim-figures/d-balcony}
  @tab @center @image{mininim-figures/p-balcony}
@end multitable


@node Items
@section Items
@cindex items

The item extension is used only by @code{FLOOR}.  Items are placed over
the floor construction they belong to and animated.  They can be caught
by the kid by pressing the shift key.

@multitable @columnfractions .3 .15 .55
  @headitem Code @tab Graphics @tab Notes

  @extindex NO_ITEM
  @item @code{NO_ITEM}
  @tab
  @tab This results in no graphics at all.

  @extindex EMPTY_POTION
  @item @code{EMPTY_POTION}
  @tab @center @image{mininim-figures/empty-potion}
  @tab This potion has no bubbles and no effect.

  @extindex SMALL_LIFE_POTION
  @item @code{SMALL_LIFE_POTION}
  @tab @center @image{mininim-figures/small-life-potion}
  @tab This potion has red bubbles and recovers one life point.

  @extindex BIG_LIFE_POTION
  @item @code{BIG_LIFE_POTION}
  @tab @center @image{mininim-figures/big-life-potion}
  @tab This potion has red bubbles, adds one life point container and
  recover all life points.

  @extindex SMALL_POISON_POTION
  @item @code{SMALL_POISON_POTION}
  @tab @center @image{mininim-figures/small-poison-potion}
  @tab This potion has blue bubbles and takes one life point.  It has
  the same graphics as @code{ACTIVATION_POTION}.

  @extindex BIG_POISON_POTION
  @item @code{BIG_POISON_POTION}@footnote{The big poison potion is not
  available in the original game.}
  @tab @center @image{mininim-figures/big-poison-potion}
  @tab This potion has blue bubbles and takes all life point,
  effectively killing the kid.

  @extindex FLOAT_POTION
  @item @code{FLOAT_POTION}
  @tab @center @image{mininim-figures/float-potion}
  @tab This potion has green bubbles and allows the kid to levitate,
  effectively making long falls harmless.

  @extindex FLIP_POTION
  @item @code{FLIP_POTION}
  @tab @center @image{mininim-figures/flip-potion}
  @tab This potion has yellow bubbles and flips the screen horizontally,
  vertically or both, depending on its level coordinates.@footnote{In
  the original game, flip potions only invert the screen vertically and
  are drawn as @code{FLOAT_POTION}, that is, with green bubbles.}
  Drinking another one undo this effect.

  @extindex ACTIVATION_POTION
  @item @code{ACTIVATION_POTION}
  @tab @center @image{mininim-figures/activation-potion}
  @tab This potion has the same graphics as @code{SMALL_POISON_POTION}
  and is used to activate a construction.@footnote{In the original game
  the @emph{activation potion} is designed to be used in the potion
  level, a copy protection mechanism employed to stop people from
  sharing.  @strong{MININIM is free software}, and we repudiate this
  kind of measure.  Thus here @emph{activation potions} may be used to
  handicap the kid, but certainly won't be used to do so to you nor to
  your friends.}

  @extindex SWORD
  @item @code{SWORD}@footnote{The sword graphics is mirrored
  horizontally depending on its level coordinates.  This is not so in
  the original game.}
  @tab @center @image{mininim-figures/sword}
  @tab This allows the kid to enter fight mode.  The sword
  blinks from time to time.
@end multitable



@c --- Movements;
@node Movements
@chapter Movements
@cindex movements

In his journey to save the princess, the kid has to endure several
levels full of challenging traps and skilled opponents.  Run, walk,
turn, crouch, jump, hang, climb, take the sword, attack and defend are
some of the kid's movements at your disposal to make the way to the
princess tower.  Although, this is a relatively large set of movements,
basically all these are accomplished by some combination of the
directional and shift keys, often conditioned to the current kid's
state.  This chapter explains in detail all possible movements of the
kid.

@cindex movement mode
@cindex mode, movement
There are six modes of movement: @dfn{normal}, @dfn{crouch}, @dfn{run},
@dfn{hang}, @dfn{fall} and @dfn{fight}.  The mode the kid is in is the
foremost element determining how the input is translated into kid's
movements.

Notice that (whenever it makes sense) for any move, holding its
triggering keys continues or repeats the movement.@footnote{That's not
so for the original game, in which for many situations you have to
release and press the keys again to have the movement repeated.}  Often,
when transitioning from a movement to another that share some keys, you
can keep the common keys pressed, as well as any other keys ignored by
an intermediate movement, and the kid will just do the right thing.
It's also worth nothing that the kid responds to the input in real time,
that is, in the next animation cycle.@footnote{That's not so for the
original game, in which the kid delays one cycle to respond.}

@kindex LEFT
@kindex RIGHT
@kindex UP
@kindex DOWN
@kindex FRONT
@kindex BACK
@kbd{FRONT} and @kbd{BACK} are meta-keys used to refer to @kbd{LEFT} and
@kbd{RIGHT} conditionally subject to kid's facing direction.  The
@kbd{UP}, @kbd{DOWN}, @kbd{SHIFT} and @kbd{ENTER} keys are simply
referred as such.  The following figure illustrates how these keys
appear in a common keyboard.

@center @image{mininim-figures/keyboard}

@iftex
@page
@end iftex

@node Alternative gamepads
@section Alternative gamepads
@cindex alternative gamepads
@cindex gamepads, alternative

@cindex numeric keypad
@cindex keypad, numeric
@cindex gamepad, numeric keypad
The classic numeric keypad controls, described in the original game's
manual, may be used.  Its mapping is shown in the following figure.

@center @image{mininim-figures/keypad}

@smallindentedblock
@center @kbd{ENTER} (@kbd{ENTER}) @kbd{4} (@kbd{LEFT}) @kbd{8} (@kbd{UP}) @kbd{6} (@kbd{RIGHT}) @kbd{5}, @kbd{2} (@kbd{DOWN})
@center @kbd{7} (@kbd{LEFT} + @kbd{UP}) @kbd{9} (@kbd{RIGHT} + @kbd{UP}) @kbd{1} (@kbd{LEFT} + @kbd{DOWN}) @kbd{3} (@kbd{RIGHT} + @kbd{DOWN})
@end smallindentedblock


@cindex joystick mapping
@cindex mapping joystick
@cindex gamepad, joystick
You can also use a joystick to control the kid.  After hot-plugging the
joystick in, make sure the axes are centered and no button is pressed,
then press @kbd{CTRL+J} to enable and auto-calibrate your joystick
on-the-fly.  The figure below shows the default assumed joystick layout.
If for some reason your joystick doesn't work with this mapping or you
want to modify the default mapping, use the @option{--joystick-axis} and
@option{--joystick-button} options.  In case your joystick starts to
behave oddly, press @kbd{CTRL+J} again to re-calibrate it.  If the kid
continues to perform spurious movements, the options
@option{--joystick-axis-threshold} and
@option{--joystick-button-threshold} may help.  @xref{Gamepad options}.

@center @image{mininim-figures/joystick}

@smallindentedblock
@center @strong{H-} (@kbd{LEFT}) @strong{H+} (@kbd{RIGHT}) @strong{V-} (@kbd{UP}) @strong{V+} (@kbd{DOWN})
@center @strong{0} (@kbd{UP}) @strong{1} (@kbd{RIGHT}) @strong{2} (@kbd{DOWN}) @strong{3} (@kbd{LEFT}) @strong{4} (@kbd{ENTER}) @strong{5} (@kbd{SHIFT}) @strong{8} (@kbd{TIME}) @strong{9} (@kbd{PAUSE})
@end smallindentedblock



@iftex
@page
@end iftex

@node Directed relative positioning
@section Directed relative positioning
@cindex directed relative positioning
@cindex positioning, directed relative
@cindex relative positioning, directed

The concept of @emph{directed relative positioning}, necessary to easily
describe the relations between constructions and the kid is analogous to
the already defined concept of @emph{non-directed relative positioning},
used to describe relations between constructions.  Consider the kid's
place @emph{C}, which has the coordinates @math{(r,f,p)}, its 8 adjacent
places and the direction the kid is facing, as shown in the following
two figures.

@center @image{mininim-figures/relative-coordinates-directed-left} @image{mininim-figures/relative-coordinates-directed-right}

@smallindentedblock
@center @abbr{@strong{TF}, top front} @abbr{@strong{T}, top} @abbr{@strong{TB}, top back} @abbr{@strong{F}, front} @abbr{@strong{C}, center}
@center @abbr{@strong{BA}, back} @abbr{@strong{BF}, bottom front}, @abbr{@strong{B}, bottom} @abbr{@strong{BB}, bottom back}
@end smallindentedblock

Then we define the following mapping between names and coordinates:

@multitable @columnfractions .33 .33 .33
@headitem Left @tab Right @tab Coordinates
@item TF @tab TB @tab @math{(r,f - 1,p - 1)}
@item T  @tab T @tab @math{(r,f - 1,p)}
@item TB @tab TF @tab @math{(r,f - 1,p + 1)}
@item F @tab BA @tab @math{(r,f,p - 1)}
@item C @tab C @tab @math{(r,f,p)}
@item BA @tab F @tab @math{(r,f,p + 1)}
@item BF @tab BB @tab @math{(r,f + 1,p - 1)}
@item B @tab B @tab @math{(r,f + 1,p)}
@item BB @tab BF @tab @math{(r,f + 1,p + 1)}
@end multitable


@node Hangable place
@section Hangable place
@cindex hangable place

Quite a few movements might culminate in the kid hanging on a
construction.  In order to describe the conditions in which that may
happen, it's necessary to define the concept of @emph{hangable place}.

@cartouche
@noindent@strong{Hangable place:} we say the kid's place is
@dfn{hangable}, if (and only if) its top construction is @emph{strictly
traversable} and its top front one is @emph{hangable} in the opposite
direction.
@end cartouche


@node Normal
@section Normal
@cindex normal movement mode
@cindex mode, normal movement
@cindex movement mode, normal

The movement mode at the beginning of each level is @emph{normal}.
While in it the kid is standing still.

@center @image{mininim-figures/kid-normal-right}


@subsection Turn
@cindex turn movement
@cindex movement, turn

If you press @kbd{BACK}, the kid turns and then faces the opposite
direction likewise.

@center @image{mininim-figures/kid-normal-right} @arrow{} @image{mininim-figures/kid-turn} @arrow{} @image{mininim-figures/kid-normal-left}


@subsection Vertical jump
@cindex vertical jump movement
@cindex movement, vertical jump
@cindex jump movement, vertical

Pressing @kbd{UP}, makes the kid perform a vertical jump.

@center @image{mininim-figures/kid-normal-left} @arrow{} @image{mininim-figures/kid-vjump}

In case his @emph{top construction} is @emph{strictly traversable} but
he isn't in a @emph{hangable place}, he performs a long vertical jump
and comes back to the @strong{exact} same position he was before the
jump.@footnote{This is not so in the original game, where he moves a
little bit forward at each vertical jump.}

@center @image{mininim-figures/kid-vjump} @arrow{} @image{mininim-figures/kid-normal-left}

In case his @emph{top construction} is not @emph{strictly traversable}
and his @emph{back place} is not @emph{hangable}, he performs a short
vertical jump and then comes back to the exact same position he was
before the jump.

@center @image{mininim-figures/kid-vjump-normal-floor-floor} @arrow{} @image{mininim-figures/kid-vjump-vjump-floor-floor} @arrow{} @image{mininim-figures/kid-vjump-normal-floor-floor}

In case he's in a @emph{hangable place}, he performs a long vertical
jump (after coming close enough to the edge if he isn't already) and
hangs for a brief period of time.

@center @image{mininim-figures/kid-vjump-floor-no-floor} @arrow{} @image{mininim-figures/kid-vjump-hang-left}

In case his @emph{back place} is @emph{hangable} and @emph{non-strictly
traversable}, he backs off so the situation fits the previous paragraph
description.

@center @image{mininim-figures/kid-vjump-floor} @arrow{} @image{mininim-figures/kid-vjump-floor-no-floor}

In case his @emph{back place} is @emph{hangable} but @emph{strictly
traversable}, he backs off just enough, without entering the
@emph{strictly traversable} place, to perform a very vertical jump, and
then hangs as described.

@center @image{mininim-figures/kid-vjump-floor-traversable} @arrow{} @image{mininim-figures/kid-vjump-floor-no-floor-traversable} @arrow{} @image{mininim-figures/kid-vjump-hang-left-traversable}

If holding @kbd{SHIFT}, the kid enters @emph{hang mode}, otherwise he
just drops back to the ground.

@center @image{mininim-figures/kid-vjump-hang-left} @arrow{} @image{mininim-figures/kid-vjump-floor-no-floor}

@center @image{mininim-figures/kid-vjump-hang-left-traversable} @arrow{} @image{mininim-figures/kid-vjump-floor-no-floor-traversable}


@subsection Normal jump
@cindex normal jump movement
@cindex movement, normal jump
@cindex jump movement, normal

Pressing @kbd{UP} and @kbd{FRONT} at once makes the kid jump forward.
He can jump over (up to) two @emph{places} across without falling.

@center @image{mininim-figures/kid-normal-left} @arrow{} @image{mininim-figures/kid-jump}

In midair, if he's in a @emph{hangable place}, holding @kbd{SHIFT} and
pressing @kbd{FRONT} makes him hang on the construction and enter
@emph{hang mode}.@footnote{The original game has no such movement.}

@center @image{mininim-figures/kid-jump-floor-no-floor} @arrow{} @image{mininim-figures/kid-hang-left}

If he's in a @emph{hangable place} for the opposite direction, holding
@kbd{SHIFT} and pressing @kbd{BACK} makes him turn in midair, hang on
the construction and enter @emph{hang mode}.@footnote{The original game
has no such movement.}

@center @image{mininim-figures/kid-jump-no-floor-floor} @arrow{} @image{mininim-figures/kid-hang-right}


@subsection Walk
@cindex walk movement
@cindex movement, walk

Pressing @kbd{FRONT} while holding @kbd{SHIFT}, makes the kid walk
carefully.

@center @image{mininim-figures/kid-normal-left} @arrow{} @image{mininim-figures/kid-walk}

He always safely stops before a collision, fall, loose floor, closer
floor and chopper blade.

@center @image{mininim-figures/kid-walk-wall} @arrow{} @image{mininim-figures/kid-normal-wall}

@center @image{mininim-figures/kid-walk-no-floor} @arrow{} @image{mininim-figures/kid-normal-no-floor}

@center @image{mininim-figures/kid-walk-loose-floor} @arrow{} @image{mininim-figures/kid-normal-loose-floor}

@center @image{mininim-figures/kid-walk-closer-floor} @arrow{} @image{mininim-figures/kid-normal-closer-floor}

@center @image{mininim-figures/kid-walk-chopper} @arrow{} @image{mininim-figures/kid-normal-chopper}

If the kid is just before a @emph{traversable} construction or a closer
floor@footnote{The kid doesn't misstep for a closer floor in the
original game.}, he misstep and gets back to his original position, as a
warning of the eminent danger.

@center @image{mininim-figures/kid-misstep-no-floor} @arrow{} @image{mininim-figures/kid-normal-no-floor}

@center @image{mininim-figures/kid-misstep-loose-floor} @arrow{} @image{mininim-figures/kid-normal-loose-floor}

@center @image{mininim-figures/kid-misstep-closer-floor} @arrow{} @image{mininim-figures/kid-normal-closer-floor}

If you insist, he'll obey and suffer the consequences --- so, be
careful!


@subsection Descend
@cindex descend movement
@cindex movement, descend

If you press @kbd{DOWN} and the kid's @emph{bottom back place} is
@emph{hangable} and he's near enough to it, he descends, then hangs
briefly --- entering @emph{hang mode} if @kbd{SHIFT} is kept pressed, or
dropping off otherwise.

@center @image{mininim-figures/kid-hang-climb-01} @arrow{} @image{mininim-figures/kid-hang-climb-00}


@node Crouch
@section Crouch
@cindex crouch movement mode
@cindex mode, crouch movement
@cindex movement mode, crouch

If you press @kbd{DOWN} and the kid's @emph{bottom back place} is
@emph{non-hangable}, or the kid is not near enough to it, he crouches.

@center @image{mininim-figures/kid-normal-left} @arrow{} @image{mininim-figures/kid-couch}

The kid stays crouched as long as you keep @kbd{DOWN} pressed.
Releasing it makes him stand up again.

@center @image{mininim-figures/kid-uncouch} @arrow{} @image{mininim-figures/kid-normal-left}

@subsection Crouching jump
@cindex crouching jump movement
@cindex movement, crouching jump
@cindex jump movement, crouching

If you press @kbd{FRONT} without releasing @kbd{DOWN}, the kid performs
little crouching jumps forward.

@center @image{mininim-figures/kid-couch} @arrow{} @image{mininim-figures/kid-couch-forward} @arrow{} @image{mininim-figures/kid-couch}


@node Run
@section Run
@cindex run movement mode
@cindex mode, run movement
@cindex movement mode, run

Pressing @kbd{FRONT}, makes the kid start to run.@footnote{Unless he is
facing a @emph{collidable} construction with at most one place of
distance, in which case he performs a @emph{walk}.  Notice that in the
original game the threshold is lower.}

@center @image{mininim-figures/kid-normal-left} @arrow{} @image{mininim-figures/kid-start-run}

He runs as long as you keep @kbd{FRONT} pressed.

@center @image{mininim-figures/kid-start-run} @arrow{} @image{mininim-figures/kid-run}

Releasing it makes him stop, and go back to the normal stage.

@center @image{mininim-figures/kid-stop-run} @arrow{} @image{mininim-figures/kid-normal-left}

@subsection Running jump
@cindex running jump movement
@cindex movement, running jump
@cindex jump movement, running

In case you press @kbd{UP} while running, the kid performs a running
jump.  The running jump has a reach greater than the @emph{normal jump}.
The kid can jump over (up to) three @emph{places} across without
falling.

@center @image{mininim-figures/kid-run} @arrow{} @image{mininim-figures/kid-run-jump}

When the kid lands on ground, he continues to run if you keep
@kbd{FRONT} pressed.

@center @image{mininim-figures/kid-run-jump} @arrow{} @image{mininim-figures/kid-run}

This implies that, if you keep both keys pressed the movement repeats
indefinitely.

@center @image{mininim-figures/kid-run} @arrow{} @image{mininim-figures/kid-run-jump} @arrow{} @image{mininim-figures/kid-run} @arrow{} @image{mininim-figures/kid-run-jump}

In midair, if he's in a @emph{hangable place}, holding @kbd{SHIFT} and
pressing @kbd{FRONT} makes him hang on the construction and enter
@emph{hang mode}.@footnote{The original game has no such movement.}

@center @image{mininim-figures/kid-run-jump-floor-no-floor} @arrow{} @image{mininim-figures/kid-hang-left}

If he's in a @emph{hangable place} for the opposite direction, holding
@kbd{SHIFT} and pressing @kbd{BACK} makes him turn in midair, hang on
the construction and enter @emph{hang mode}.@footnote{The original game
has no such movement.}

@center @image{mininim-figures/kid-run-jump-no-floor-floor} @arrow{} @image{mininim-figures/kid-hang-right}

@subsection Running crouch
@cindex running crouch movement
@cindex movement, running crouch
@cindex couch movement, running

If you press @kbd{DOWN} while running, he crouches, slipping with some
momentum, and then he enters @emph{crouch mode}.

@center @image{mininim-figures/kid-run} @arrow{} @image{mininim-figures/kid-couch}

@subsection Running turn
@cindex running turn movement
@cindex movement, running turn
@cindex turn movement, running

If you press @kbd{BACK} while running, the kid turns without stopping
and continues to run in the opposite direction if you keep it pressed.

@center @image{mininim-figures/kid-run} @arrow{} @image{mininim-figures/kid-turn-run} @arrow{} @image{mininim-figures/kid-run-right}

@node Hang
@section Hang
@cindex hang movement mode
@cindex mode, hang movement
@cindex movement mode, hang

@cindex hang free
@cindex hang non-free
There are two modes of hanging: @emph{free} and @emph{non-free}.  The
kid @dfn{hangs free} when his @emph{front construction} is not
collidable in the direction of hanging.  Otherwise he @dfn{hangs
non-free}.

@cindex hang free
While @emph{hanging free} the kid swings back and forth like a pendulum.

@center @image{mininim-figures/kid-hang-left} @arrow{} @image{mininim-figures/kid-hang-left-forth} @arrow{} @image{mininim-figures/kid-hang-left} @arrow{} @image{mininim-figures/kid-hang-left-back}

@cindex hang non-free
By contrast, when @emph{hanging non-free} the kid keeps himself static.

@center @image{mininim-figures/kid-hang-left-non-free}

@subsection Hanging fall
@cindex hanging fall movement
@cindex movement, hanging fall
@cindex fall movement, hanging

When @emph{hanging free}, there is a limit for how much time the kid can
support his own weight, after which he drops from the construction.
Releasing @kbd{SHIFT} in the meantime has the same effect.  The kid will
fall either aligned with the @emph{hangable place's column} or with the
@emph{hangable place's front column}, depending upon which his feet are
in when he leaves the hanged construction.@footnote{It's not possible to
perform such movements in the original game, because there the kid
always falls over a @emph{non-strictly traversable} construction, in
case there is one.}

@center @image{mininim-figures/kid-hang-free-fall}

The kid can sustain himself indefinitely when @emph{hanging non-free},
thus the only way to make him drop is by releasing @kbd{SHIFT}.  As one
would expect, the kid always falls aligned to the @emph{hangable place's
column}.

@center @image{mininim-figures/kid-hang-left-non-free-floor-00} @arrow{} @image{mininim-figures/kid-hang-left-non-free-floor-01}

@subsection Hanging turn
@cindex hanging turn movement
@cindex movement, hanging turn
@cindex turn movement, hanging

When the kid is @emph{hanging free} in a place that is @emph{hangable}
in both directions and his feet are in the @emph{hangable place},
pressing @kbd{BACK} while holding @kbd{SHIFT}, makes him turn in midair
and hang on the con at his back.@footnote{This movement is not present
in the original game.}

@center @image{mininim-figures/kid-hang-left-back-floor-no-floor-floor} @arrow{} @image{mininim-figures/kid-hang-right-floor-no-floor-floor}

Naturally, if @emph{hanging non-free} in a place that is @emph{hangable}
in both directions, there is no need to observe the kid's body
inclination, just pressing @kbd{BACK}, will do the job (granted
@kbd{SHIFT} is kept pressed).@footnote{This movement is not present in
the original game.}

@center @image{mininim-figures/kid-hang-left-back-floor-no-floor-floor-non-free} @arrow{} @image{mininim-figures/kid-hang-right-floor-no-floor-floor-non-free}

@subsection Climb
@cindex climb movement
@cindex movement, climb

Pressing @kbd{UP} while hanging makes the kid climb the construction for
both modes.

@center @image{mininim-figures/kid-hang-climb-00} @arrow{} @image{mininim-figures/kid-hang-climb-01} @image{mininim-figures/kid-hang-climb-non-free-00} @arrow{} @image{mininim-figures/kid-hang-climb-non-free-01}


@node Fall
@section Fall
@cindex fall movement mode
@cindex mode, fall movement
@cindex movement mode, fall

This mode is not really related to a key combination, but instead to a
circumstance: the kid trying to support his own weight on an
@emph{strictly traversable} construction.  When this happens he
accelerates downwards (eventually reaching terminal velocity), until he
encounters a @emph{non-strictly traversable} construction or hangs at a
@emph{hangable place} which might appear in his way down.

If the kid hits a @emph{non-traversable} construction with sufficient
speed, he is harmed or can even die.  Falling from a height of one floor
inflicts no damage on him.  Two floors takes one life point.  Three or
more kills him instantly.

@subsection Falling hang
@cindex falling hang movement
@cindex movement, falling hang
@cindex hang movement, falling

When falling if the kid is passing through a @emph{hangable place} and
his vertical velocity is low enough, and he's near enough to the
@emph{hangable construction}, he is able to hang there and enter
@emph{hang mode} if you hold @kbd{SHIFT} down.

@center @image{mininim-figures/kid-fall-floor-front} @arrow{} @image{mininim-figures/kid-hang-left}

@subsection Falling turn
@cindex falling turn movement
@cindex movement, falling turn
@cindex turn movement, falling

If instead the place is @emph{hangable} at the opposite direction,
holding @kbd{SHIFT} and pressing @kbd{BACK} makes the kid turn in mid
air, hang there and enter @emph{hang mode}.@footnote{This movement is
not available in the original game.}

@center @image{mininim-figures/kid-fall-floor-back} @arrow{} @image{mininim-figures/kid-hang-right}


@node Fight
@section Fight
@cindex fight movement mode
@cindex mode, fight movement
@cindex movement mode, fight

If the kid has got the sword, @kbd{RETURN} takes the sword and puts him
in @emph{fight mode}.@footnote{In the original game, the kid enters
fight mode automatically in the eminence of an enemy threat.}

@center @image{mininim-figures/kid-normal-left} @arrow{} @image{mininim-figures/kid-take-sword} @arrow{} @image{mininim-figures/kid-sword-normal}

@subsection Fight walk forward
@cindex fight walk forward movement
@cindex movement, fight walk forward

Pressing @kbd{FRONT}, makes the kid walk forward.

@center @image{mininim-figures/kid-sword-normal} @arrow{} @image{mininim-figures/kid-sword-walkf}

@subsection Fight walk backward
@cindex fight walk backward movement
@cindex movement, fight walk backward

If you press @kbd{BACK}, the kid goes backward.

@center @image{mininim-figures/kid-sword-normal} @arrow{} @image{mininim-figures/kid-sword-walkb}

@subsection Defense
@cindex defense movement
@cindex movement, defense

If you press @kbd{UP}, the kid makes the defense movement.

@center @image{mininim-figures/kid-sword-normal} @arrow{} @image{mininim-figures/kid-sword-defense}

@subsection Attack
@cindex attack movement
@cindex movement, attack

Pressing @kbd{SHIFT} makes the kid attack.

@center @image{mininim-figures/kid-sword-normal} @arrow{} @image{mininim-figures/kid-sword-attack}

@subsection Counter attack and counter defense
@cindex counter attack
@cindex counter defense
@cindex mode, counter attack
@cindex mode, counter defense
@cindex kca
@cindex kcd

Holding @kbd{SHIFT} and @kbd{UP} puts the kid in counter attack and
counter defense mode.  At first, there is no immediate noticeable
difference from standing still in fight mode, but as an enemy
attacks@footnote{In the original game the terminology for ``attack'' is
``striking'', for ``counter attack'' is ``re-striking after block'', for
``defense'' is ``blocking strike'' and for ``counter defense'' is
``improper blocking''.}, the kid defends for certain. Then, depending
upon probability whose likelihood is given by the @acronym{KCA, Kid's
Counter Attack skill}, he may counter attack.

If he does, depending on the enemy's skills, they may counter defend and
then counter attack.  In that case, depending upon probability whose
likelihood is given by the @acronym{KCD, Kid's Counter Defense skill},
the kid may counter defend and the process restarts at the kid's counter
attack stage, making for a chain of counter attacks and counter defenses
whose length is determined only by the fighters' skills (and a little
bit of luck).  Every counter attack that is not responded with a counter
defense by the opponent, makes him lose a life point.

When standing still in this mode, releasing @kbd{UP} initiates an attack
(but at the same time makes the kid briefly vulnerable to the enemy's
attacks).  In this case the same counter attack and counter defense
chain logic described above is symmetrically applied.

Pressing @kbd{FRONT} and @kbd{BACK} (while holding @kbd{SHIFT} and
@kbd{UP}) makes the kid walk forward and backward, respectively, without
leaving this mode.  However, although walking backward doesn't make him
lower his guard, walking forward makes him vulnerable until he puts
himself on guard again.

The kid's skills are built up by defeating enemies.@footnote{In the
original game there is no such skills scheme.  There, if you don't get
tired of pressing @kbd{SHIFT} and @kbd{UP}, the kid's counter attack and
counter defense are infallible.}  The more advanced the defeated enemy's
skills, the more the kid's skills improve.  Both skills ---KCA and
KCD--- are given by a number between 0 and 100, interpreted as
percentages, indicating the likelihood of counter attacking and counter
defending, respectively.

@subsection Keep sword
@cindex keep sword movement
@cindex movement, keep sword

Finally you can make the kid keep his sword and return to @emph{normal
mode} by pressing @kbd{DOWN}.

@center @image{mininim-figures/kid-sword-normal} @arrow{} @image{mininim-figures/kid-keep-sword} @arrow{} @image{mininim-figures/kid-normal-left}





@c --- Key bindings;
@node Key bindings
@chapter Key bindings
@cindex key bindings

@cindex megahit
@cindex improved
The engine has several key bindings that control an wide range of
settings and perform useful functions.  Many key bindings work anytime,
in the title screen, cut scenes and levels, while others work only in
the latter.  The key bindings are designed to mimic those of the
original game when started with the option @option{megahit}
(@option{improved} in latter revisions), however they can implement a
super-set of the functions available there and MININIM implements quite
a few more.  Also, many key bindings have a configuration option
counterpart.  @xref{Configuration}.

@node Game flow
@section Game flow
@cindex game flow key bindings
@cindex key bindings, game flow

@table @kbd
@kindex SHIFT+L
@cindex @code{--start-level}, related key binding
@item SHIFT+L
Warp to next level.  Related to option @option{--start-level}.

@kindex CTRL+A
@item CTRL+A
Restart level.

@kindex CTRL+R
@item CTRL+R
Restart the game.

@kindex CTRL+Q
@item CTRL+Q
Quit the game.
@end table

@node Graphical rendering
@section Graphical rendering
@cindex graphical rendering key bindings
@cindex key bindings, graphical rendering

These key bindings modify how the engine graphically renders the game
world objects.

@table @kbd
@kindex F9
@cindex @code{--hue-mode}, related key binding
@item F9
Select hue mode.  This circulates around the modes: ``ORIGINAL'',
``NONE'', ``GREEN'', ``GRAY'', ``YELLOW'' and ``BLUE''.  The
``ORIGINAL'' value gives level modules autonomy in this choice for each
particular level.  This is the default.  For the classic behavior of the
first version of the original game select ``NONE''.  Related to option
@option{--hue-mode}.

@kindex F10
@cindex @code{--guard-mode}, related key binding
@item F10
Select guard mode. This circulates around the modes: ``ORIGINAL'',
``GUARD'', ``FAT GUARD'', ``VIZIER'', ``SKELETON'' and ``SHADOW''.  The
``ORIGINAL'' mode gives level modules autonomy in this choice for each
particular guard.  This is the default.  Related to option
@option{--guard-mode}.

@kindex F11
@cindex @code{--environment-mode}, related key binding
@item F11
Select environment mode.  This circulates around the modes:
``ORIGINAL'', ``DUNGEON'' and ``PALACE''.  The ``ORIGINAL'' value gives
level modules autonomy in this choice for each particular level.  This
is the default.  Related to option @option{--environment-mode}.

@kindex F12
@cindex @code{--video-mode}, related key binding
@item F12
Select video mode.  This circulates around the modes: ``VGA'', ``EGA'',
``CGA'' and ``HGC''. The default is VGA.  Related to option
@option{--video-mode}.

@kindex SHIFT+B
@cindex @code{--blind-mode}, related key binding
@item SHIFT+B
Toggle blind mode.  In blind mode background and non-animated sprites
are not drawn.  The default is to draw everything.  Related to option
@option{--blind-mode}.
@end table

@node Life and death
@section Life and death
@cindex life and death key bindings
@cindex key bindings, life and death

@table @kbd
@kindex K
@item K
Kill enemy.@footnote{This only works for the enemy currently associated
with the kid.  In the original game this works for the enemy in the room
at view, as it can only handle one guard per room.  There is no such
limit in MININIM.}

@kindex R
@item R
Resurrect kid.

@kindex I
@cindex @code{--immortal-mode}, related key binding
@item I
Toggle immortal mode.  In immortal mode the kid can't be harmed.  The
default mode is mortal.  Related to option @option{--immortal-mode}.

@kindex SHIFT+S
@item SHIFT+S
Increment kid's current life points.

@kindex SHIFT+T
@cindex @code{--total-lives}, related key binding
@item SHIFT+T
Increment kid's total life points.  Related to option
@option{--total-lives}.
@end table

@node Kid special
@section Kid special
@cindex kid special key bindings
@cindex key bindings, kid special

These key bindings give or trigger special kid's abilities.

@table @kbd
@kindex A
@item A
Alternate between kid and its shadows.  This is intended for level
modules that make use of such feature.  That's not the legacy module
case.

@kindex SHIFT+W
@item SHIFT+W
Float kid.  This is equivalent to drinking a float potion.
@end table

@node Time
@section Time
@cindex time key bindings
@cindex key bindings, time
@cindex @code{--time-limit}, related key binding
@cindex @code{--start-time}, related key binding

These key bindings allow you to control the remaining time available to
end the game.  They are related to options @option{--time-limit} and
@option{--start-time}.

@table @kbd
@kindex SPACE
@item SPACE
Display remaining time.  Notice that the remaining time is displayed
automatically when it reaches multiples of 5 minutes, and it's
constantly shown when remains less than a minute to its end.

@kindex +
@item +
Increment and display remaining time.  If the remaining time is greater
than 1 minute, increment remaining time by 1 minute, otherwise by 1
second.

@kindex -
@item -
Decrement and display remaining time.  If the remaining time is greater
than 1 minute, decrement remaining time by 1 minute, otherwise by 1
second.
@end table

@node Skills
@section Skills
@cindex skills key bindings
@cindex key bindings, skills
@cindex @code{--kca}, related key binding
@cindex @code{--kcd}, related key binding

These key bindings allow you to set the kid skills.  They are related to
options @option{--kca} and @option{--kcd}.

@table @kbd
@kindex TAB
@item TAB
Display skills.  If the kid is associated with an enemy, it shows both
fighters' skills, otherwise it only shows the kid's.

@kindex CTRL+=
@item CTRL+=
Increment KCA skill.

@kindex CTRL+-
@item CTRL+-
Decrement KCA skill.

@kindex ALT+=
@item ALT+=
Increment KCD skill.

@kindex ALT+-
@item ALT+-
Decrement KCD skill.
@end table

@node Level navigation
@section Level navigation
@cindex level navigation key bindings
@cindex key bindings, level navigation
@cindex camera moving
@cindex moving camera
@cindex room coordinates
@cindex coordinates, room

These key bindings allow you to move the camera around the level, making
it possible to view any room linked to the current one without having to
move the kid there.  Notice that if the kid enters the room the camera
is on, it starts following him again.  There is also a couple of key
bindings intended to show room coordinates, which is useful when
building levels.

@table @kbd
@kindex H
@item H
Move the camera to the room at left (right if the screen is flipped
horizontally).

@kindex J
@item J
Move the camera to the room at right (left if the screen is flipped
horizontally).

@kindex U
@item U
Move the camera to the room above (below if the screen is flipped
vertically).

@kindex N
@item N
Move the camera to the room below (above if the screen is flipped
vertically).

@kindex HOME
@item HOME
Move the camera back to the kid's room.

@kindex C
@item C
Show direct coordinates.

@kindex SHIFT+C
@item SHIFT+C
Show indirect coordinates.
@end table

@node Files
@section Files
@cindex files key bindings
@cindex key bindings, files

These key bindings are used to save and load configuration files.  They
open a platform-dependent file choosing dialog.  Notice that save files
are a particular case of configuration files and should be loaded the
same way.  When loaded in-game, configuration files take effect
immediately, however some effects only become visible under certain
conditions.  For instance save files show their effect only on game
(re)start.

@table @kbd
@kindex CTRL+L
@cindex @code{--load-config}, related key binding
@item CTRL+L
Load configuration.  Related to option @option{--load-config}.

@kindex CTRL+G
@item CTRL+G
Save game.
@end table

@node Peripherals
@section Peripherals
@cindex peripherals key bindings
@cindex key bindings, peripherals

These key bindings allow you to tune hardware peripherals that work with
the game.

@table @kbd
@kindex F
@cindex @code{--fullscreen}, related key binding
@item F
Toggle fullscreen mode.  In fullscreen mode the window spans the entire
screen.  The default is to have a window of 640x400 resolution.  Related
to option @option{--fullscreen}.

@kindex SHIFT+I
@cindex @code{--display-flip-mode}, related key binding
@item SHIFT+I
Select display flip mode.  This circulates around the modes: ``NONE'',
``VERTICAL'', ``HORIZONTAL'' and ``VERTICAL + HORIZONTAL''.  The default
is ``NONE''.  Related to option @option{--display-flip-mode}.

@kindex SHIFT+K
@cindex @code{--gamepad-flip-mode}, related key binding
@item SHIFT+K
Select keyboard flip mode.  This circulates around the modes: ``NONE'',
``VERTICAL'', ``HORIZONTAL'' and ``VERTICAL + HORIZONTAL''.  The default
is ``NONE''.  Related to option @option{--gamepad-flip-mode}.

@kindex CTRL+J
@item CTRL+J
@cindex joystick calibration
@cindex calibration, joystick
@cindex @code{--joystick-axis-threshold}, related key binding
@cindex @code{--joystick-button-threshold}, related key binding
Activate and auto-calibrate joystick.  Use this when hot-plugging a
joystick or in case the joystick starts to behave oddly.  @xref{Gamepad
options}.

@kindex CTRL+S
@cindex @code{--sound}, related key binding
@item CTRL+S
Toggle sound.  The default is to have sound enabled.  Related to option
@option{--sound}.
@end table

@node Miscellaneous
@section Miscellaneous
@cindex miscellaneous key bindings
@cindex key bindings, miscellaneous

These are key bindings that don't fit in any other category.

@table @kbd
@kindex CTRL+V
@cindex @code{--version}, related key binding
@item CTRL+V
Show engine name and version.  Related to option @option{--version}.
@end table




@c --- Configuration;
@node Configuration
@chapter Configuration
@cindex configuration

@cindex command line options
@cindex environment variables
@cindex configuration files
MININIM can be easily setup to match user's preferences regarding the
way the game looks and behaves.  It features an integrated configuration
system which offers three distinct interfaces: @emph{command line
options}, @emph{environment variables} and @emph{configuration files}.

The configuration system uses the command line options parser as the
central interpreter for the configuration process.  Providing a single
options parsing routine allows for easy maintenance, equivalence between
methods and a canonical interface for integrating future methods.

For that end, each configuration option backend implements a translator
between its specifics of option representation and access, to a normal
command line array.  Then the resulting options are roughly processed as
if they were given at the engine invocation command line.

As the options are the same for all three current methods of
configuration, and all of them are in essence processed as command line
options, it's unnecessary to describe all options for each separately.
Therefore, we provide systematic rules for converting between method
option names and their command line equivalents, and then describe only
the latter.

@cindex option name conversion
@cindex conversion, option name
The rule for option naming conversion is very simple: for every command
line option of the form @option{x-y} there is an equivalent environment
variable option @env{MININIM_X_Y} and an equivalent configuration file
option @samp{x y}.

The multiple methods of configuration are cumulative but command line
options override any other, while environment variables override the
main configuration file.  In any method applicable later options
override earlier ones.  The option @option{--print-paths} shows, among
other things, the expected file name of the main configuration file.
Configuration files have INI format without any sections, like this:

@example
option 0 = value 0
...
option n = value n
@end example

Notice that many options can be changed on the fly by key binding
counterparts. @xref{Key bindings}.

The following remarks apply to the options list in this chapter:

@itemize
@item Long option names are case sensitive.

@item Option values are case insensitive.

@item Both can be partially specified as long as they are kept
unambiguous.

@item @var{boolean} is an integer equating to @samp{0}, or any sub-string
(including the null string) of @samp{FALSE}, @samp{OFF} or @samp{NO} to
disable the respective feature, and any other value (even no string at
all) to enable it.

@item For any non-specified option the documented default
applies.

@item Integers can be specified in any of the formats defined by the
C language.

@item Key bindings references are based on the default mapping.
@end itemize

@cindex legacy command line arguments
@cindex arguments, legacy command line
@cindex command line arguments, legacy
@cindex legacy options
@cindex options, legacy
The legacy command line interface present in versions 1.0, 1.3 and 1.4
of the original game is supported for the sake of compatibility with
software that use it.  Legacy level and video non-option arguments are
honored, while all others are currently ignored silently.  The legacy
arguments can't be used by other configuration method besides the
command line.  The legacy command line arguments are:

@itemize
@optindex megahit
@optindex improved
@item @strong{Cheat:} @option{megahit}, @option{improved};
@optindex adlib
@optindex compuadd
@optindex covox
@optindex digi
@optindex disney
@optindex gblast
@optindex ibmg
@optindex midi
@optindex mvpas
@optindex sblast
@optindex stdsnd
@optindex tandy
@item @strong{Audio:} @option{adlib}, @option{compuadd}, @option{covox},
@option{digi}, @option{disney}, @option{gblast}, @option{ibmg},
@option{midi}, @option{mvpas}, @option{sblast}, @option{stdsnd},
@option{tandy};
@optindex cga
@optindex draw
@optindex ega
@optindex herc
@optindex hga
@optindex mcga
@optindex tga
@optindex vga
@item @strong{Video:} @option{cga}, @option{draw}, @option{ega},
@option{herc}, @option{hga}, @option{mcga}, @option{tga}, @option{vga};
@optindex bypass
@optindex pack
@optindex unpack
@optindex demo
@optindex j
@item @strong{Memory:} @option{bypass}, @option{pack}, @option{unpack},
@option{demo}, @option{j};
@end itemize

These are case insensitive.  Additionally specifying a standalone
integer @var{i} is equivalent to passing the option
@option{--start-level=i}.  Unlike the original game, there is no
dependence between any two arguments (like start level and cheat
arguments).


@node Configuration options
@section Configuration options
@cindex configuration options
@cindex options, configuration

@table @option
@optindex --ignore-environment
@item --ignore-environment
Ignore environment variables.  The default is to parse them after the
main configuration file.

@optindex --ignore-main-config
@item --ignore-main-config
Ignore main configuration file.  The default is to parse it at the very
beginning of each run.

@optindex --load-config
@cindex @kbd{CTRL+L}, related option
@item --load-config=FILE
Load configuration file @var{file}.  The options set in @var{file} have
the same precedence as the equivalent command line options given at its
place of occurrence.  This can be done in-game by the @kbd{CTRL+L} key
binding.
@end table


@node Level options
@section Level options
@cindex level options
@cindex options, level

@table @option
@optindex --level-module
@cindex @samp{LEGACY} level module
@cindex level module, @samp{LEGACY}
@cindex @samp{PLV} level module
@cindex level module, @samp{PLV}
@cindex @samp{DAT} level module
@cindex level module, @samp{DAT}
@cindex @samp{CONSISTENCY} level module
@cindex level module, @samp{CONSISTENCY}
@item --level-module=LEVEL-MODULE
Select level module.  A level module determines a way to generate
consecutive levels for use by the engine.  Valid values for
@var{level-module} are: @samp{LEGACY}, @samp{PLV}, @samp{DAT} and
@samp{CONSISTENCY}.  @samp{LEGACY} is the module designed to read the
original @acronym{PoP, Prince of Persia} 1 raw level files.  @samp{PLV}
is the module designed to read the original PoP 1 @code{PLV} extended
level files.  @samp{DAT} is the module designed to read the original PoP
1 @file{LEVELS.DAT} file.  @samp{CONSISTENCY} is the module designed to
generate random-corrected levels for accessing the engine robustness.
The default is @samp{LEGACY}.

@optindex --start-level
@cindex @kbd{SHIFT+L}, related option
@item --start-level=N
Make the kid start at level @var{n}.  The default is @samp{1}.  Valid
integers range from @samp{1} to @code{INT_MAX}.  This can be changed
in-game by the @kbd{SHIFT+L} key binding.

@optindex --start-pos
@cindex position, option
@cindex option position
@item --start-pos=R,F,P
Make the kid start at room @var{r}, floor @var{f} and place @var{p}.
The default is to let this decision to the level module.  @var{r} is an
integer ranging from 1 to @code{INT_MAX}, @var{f} is an integer ranging
from 0 to 2 and @var{p} is an integer ranging from 0 to 9.
@xref{Constructions}.
@end table

@cindex @file{LEVELS.DAT}
If the option @option{--level-module} is not given and there is a
@file{LEVELS.DAT} file in the resources directory, the DAT level module
is automatically used to load that file.  This is a compatibility
measure for applications which depend upon this legacy behavior.


@node Time options
@section Time options
@cindex time options
@cindex options, time

@table @option
@optindex --start-time
@item --start-time=N
Set the play time counter to @var{n} seconds.  The default is @samp{0}.  Valid
integers range from @samp{0} to @code{INT_MAX}.

@optindex --time-limit
@cindex @kbd{+}, related option
@cindex @kbd{-}, related option
@item --time-limit=N
Set the time limit to complete the game to @var{n} seconds.  The default
is @samp{3600} (1 hour).  Valid integers range from @samp{1} to
@code{INT_MAX}.  This can be changed in-game by the @kbd{+} and @kbd{-}
key bindings.
@end table


@node Skills options
@section Skills options
@cindex skills options
@cindex options, skills

@table @option
@optindex --immortal-mode
@cindex @kbd{I}, related option
@item --immortal-mode[=BOOLEAN]
Enable/disable immortal mode.  In immortal mode the kid can't be harmed.
The default is @samp{FALSE}.  This can be changed in-game by the @kbd{I}
key binding.

@optindex --kca
@cindex @kbd{CTRL+=}, related option
@cindex @kbd{CTRL+-}, related option
@item --kca=N
Set kid's counter attack skill to @var{n}.  The default is @samp{0}.
Valid integers range from @samp{0} to @samp{100}.  This can be changed
in-game by the @kbd{CTRL+=} and @kbd{CTRL+-} key bindings.

@optindex --kcd
@cindex @kbd{ALT+=}, related option
@cindex @kbd{ALT+-}, related option
@item --kcd=N
Set kid's counter defense skill to @var{n}.  The default is @samp{0}.
Valid integers range from @samp{0} to @samp{100}.  This can be changed
in-game by the @kbd{ALT+=} and @kbd{ALT+-} key bindings.

@optindex --total-lives
@cindex @kbd{SHIFT+T}, related option
@item --total-lives=N
Make the kid start with @var{n} total lives.  The default is @samp{3}.
Valid integers range from @samp{1} to @samp{10}.  This can be changed
in-game by the @kbd{SHIFT+T} key binding.
@end table


@node Rendering options
@section Rendering options
@cindex rendering options
@cindex options, rendering

@table @option
@optindex --blind-mode
@cindex @kbd{SHIFT+B}, related option
@item --blind-mode[=BOOLEAN]
Enable/disable blind mode.  In blind mode background and non-animated
sprites are not drawn.  The default is @samp{FALSE}.  This can be
changed in-game by the @kbd{SHIFT+B} key binding.

@optindex --display-flip-mode
@cindex @kbd{SHIFT+I}, related option
@item --display-flip-mode=DISPLAY-FLIP-MODE
Select display flip mode.  Valid values for @var{display-flip-mode} are:
@samp{NONE}, @samp{VERTICAL}, @samp{HORIZONTAL} and
@samp{VERTICAL-HORIZONTAL}.  The default is @samp{NONE}.  This can be
changed in-game by the @kbd{SHIFT+I} key binding.

@optindex --environment-mode
@cindex @kbd{F11}, related option
@item --environment-mode=ENVIRONMENT-MODE
Select environment mode.  Valid values for @var{environment-mode} are:
@samp{ORIGINAL}, @samp{DUNGEON} and @samp{PALACE}.  The @samp{ORIGINAL}
value gives level modules autonomy in this choice for each particular
level.  This is the default.  This can be changed in-game by the
@kbd{F11} key binding.

@optindex --guard-mode
@cindex @kbd{F10}, related option
@item --guard-mode=GUARD-MODE
Select guard mode.  Valid values for @var{guard-mode} are:
@samp{ORIGINAL}, @samp{GUARD}, @samp{FAT-GUARD}, @samp{VIZIER},
@samp{SKELETON} and @samp{SHADOW}.  The @samp{ORIGINAL} value gives
level modules autonomy in this choice for each particular guard.  This
is the default.  This can be changed in-game by the @kbd{F10} key
binding.

@optindex --hue-mode
@cindex @kbd{F9}, related option
@item --hue-mode=HUE-MODE
Select hue mode.  Valid values for @var{hue-mode} are: @samp{ORIGINAL},
@samp{NONE}, @samp{GREEN}, @samp{GRAY}, @samp{YELLOW} and @samp{BLUE}.
The @samp{ORIGINAL} value gives level modules autonomy in this choice
for each particular level.  This is the default.  For the classic
behavior of the first version of the original game use @samp{NONE}.
This can be changed in-game by the @kbd{F9} key binding.

@optindex --mirror-mode
@cindex @kbd{SHIFT+I}, related option (mirror mode)
@cindex @kbd{SHIFT+K}, related option (mirror mode)
@item --mirror-mode[=BOOLEAN]
Enable/disable mirror mode.  In mirror mode the screen and the keyboard
are flipped horizontally.  This is equivalent of specifying both the
options @option{--display-flip-mode=HORIZONTAL} and
@option{--gamepad-flip-mode=HORIZONTAL}.  The default is @samp{FALSE}.
This can be changed in-game by the @kbd{SHIFT+I} and @kbd{SHIFT+K} key
bindings for the display and keyboard, respectively.

@optindex --video-mode
@cindex @kbd{F12}, related option
@item --video-mode=VIDEO-MODE
Select video mode.  Valid values for @var{video-mode} are: @samp{VGA},
@samp{EGA}, @samp{CGA} and @samp{HGC}.  The default is @samp{VGA}.  This
can be changed in-game by the @kbd{F12} key binding.
@end table

@node Gamepad options
@section Gamepad options
@cindex gamepad options
@cindex options, gamepad
@cindex joystick options
@cindex options, joystick
@cindex keyboard options
@cindex options, keyboard

Gamepad is an umbrella term used in MININIM to describe any hardware
device that enables the user to control the kid's movements.  Currently,
there is support for two classes of gamepads: @emph{keyboard} and
@emph{joystick}.

The primary joystick's axis and button numbers are listed by the option
@option{--joystick-info}.  You can find out the number of a particular
axis or button by pressing it before invoking MININIM with that option.
If a stick, axis or button given to an option doesn't exist in the
primary joystick, it's silently ignored.  The joystick can be activated
and auto-calibrated in-game by the @kbd{CTRL+J} key binding.
@xref{Peripherals}.  If your joystick is peculiar enough, proving the
auto-calibration mechanism insufficient, the
@option{--joystick-axis-threshold} and
@option{--joystick-button-threshold} options may help.

@table @option
@optindex --gamepad-flip-mode
@cindex @kbd{SHIFT+K}, related option
@item --gamepad-flip-mode=GAMEPAD-FLIP-MODE
Select gamepad flip mode.  Valid values for @var{gamepad-flip-mode}
are: @samp{NONE}, @samp{VERTICAL}, @samp{HORIZONTAL} and
@samp{VERTICAL-HORIZONTAL}.  The default is @samp{NONE}.  This can be
changed in-game by the @kbd{SHIFT+K} key binding.

@optindex --joystick-axis
@item --joystick-axis=FUNC,STICK,AXIS
Map function @var{func} to joystick axis @var{stick,axis}.  Valid values
for @var{func} are: @samp{H} and @samp{V}.  @var{stick,axis} is a valid
stick and axis pair.  The default @var{stick,axis} for @samp{H} is
@samp{0,0} and for @samp{V} is @samp{0,1}.

@optindex --joystick-axis-threshold
@cindex @kbd{CTRL+J}, related option
@item --joystick-axis-threshold=FUNC,VALUE
Set joystick threshold to @var{value} for the axis mapped to @var{func}.
Valid values for @var{func} are @samp{H} and @samp{V}.  @var{value} is a
floating point ranging from @math{0.0} to @math{1.0}.  The default
@var{value} for @samp{H} is @math{0.1} and for @samp{Y} is @math{0.8}.

@optindex --joystick-button
@item --joystick-button=FUNC,BUTTON
Map function @var{func} to joystick button @var{button}.  Valid values
for @var{func} are: @samp{UP}, @samp{RIGHT}, @samp{DOWN}, @samp{LEFT},
@samp{ENTER}, @samp{SHIFT}, @samp{TIME}, @samp{PAUSE}.  @var{button} is
a valid joystick button number.  The default @var{button} values are 0,
1, 2, 3, 4, 5, 8 and 9, respectively.

@optindex --joystick-button-threshold
@cindex @kbd{CTRL+J}, related option
@item --joystick-button-threshold=FUNC,VALUE
Set joystick threshold to @var{value} for the button mapped to
@var{func}.  Valid values for @var{func} are: @samp{UP}, @samp{RIGHT},
@samp{DOWN}, @samp{LEFT}, @samp{ENTER}, @samp{SHIFT}.  @var{value} is an
integer ranging from 0 to 32767.  The default @var{value} for any
function is 100.

@optindex --joystick-info
@item --joystick-info
Print information about the primary joystick and exit.
@end table


@node Window options
@section Window options
@cindex window options
@cindex options, window

@table @option
@optindex --fullscreen
@cindex @kbd{F}, related option
@item --fullscreen[=BOOLEAN]
Enable/disable fullscreen mode.  In fullscreen mode the window spans the
entire screen.  The default is @samp{FALSE}.  This can be changed
in-game by the @kbd{F} key binding.

@optindex --window-dimensions
@item --window-dimensions=WxH
Set window width and height to @var{w} and @var{h}, respectively.  The
default is @samp{640x400}.  The values @var{w} and @var{h} are strictly
positive integers and must be separated by an @samp{x}.

@optindex --window-position
@item --window-position=X,Y
Place the window at screen coordinates @var{x,y}.  The default is to let
this choice to the window manager.  The values @var{x} and @var{y} are
integers and must be separated by a comma.
@end table


@node Paths options
@section Paths options
@cindex paths options
@cindex options, paths

@table @option
@optindex --data-path
@item --data-path=PATH
Set data path to @var{path}.  Normally, the data files are looked for in
the current working directory, then in the user data directory, then in
the resources directory, and finally in the system data directory.  If
this option is given, before looking there the data files are looked for
in @var{path}.

@optindex --print-paths
@item --print-paths
Print paths and exit.
@end table


@node Other options
@section Other options
@cindex other options
@cindex options, other

@table @option
@optindex --inhibit-screensaver
@item --inhibit-screensaver[=BOOLEAN]
Prevent the system screensaver from starting up.  The default is
@samp{TRUE}.

@optindex --skip-title
@item --skip-title[=BOOLEAN]
Skip title screen.  The default is @samp{FALSE}.

@optindex --sound
@cindex @kbd{CTRL+S}, related option
@item --sound[=BOOLEAN]
Enable/disable sound.  The default is @samp{TRUE}.  This can be changed
in-game by the @kbd{CTRL+S} key binding.
@end table


@node Help options
@section Help options
@cindex help options
@cindex options, help

@table @option
@optindex -?
@optindex --help
@item -?
@itemx --help
Print options list and exit

@optindex --usage
@item --usage
Print a short usage message and exit

@optindex -V
@optindex --version
@item -V
@itemx --version
Print program name and version and exit
@end table





@c --- Software package;
@node Software package
@chapter Software package
@include README.texi




@c 
@c @c --- Release;
@c @node Release
@c @chapter Release

@c In this chapter one can find information that are specific to the
@c current release or subject to change between releases.  It presents the
@c features this package acquired over time and what are our plans for it.
@c Last but not least, people whose contribution for this package are
@c noteworthy are acknowledged.




@c --- Announcement;
@node Announcement
@appendix Announcement
@include ANNOUNCEMENT.texi




@c 
@c @c --- News;
@c @node News
@c @section News
@c @include NEWS.texi




@c 
@c @c --- To do;
@c @node To do
@c @section To do
@c @include TODO.texi




@c 
@c @c --- Thanks;
@c @node Thanks
@c @section Thanks
@c @include THANKS.texi





@c --- Donors;
@node Donors
@appendix Donors
@include DONORS.texi





@c --- GNU Free Documentation License;
@node GNU FDL
@appendix GNU FDL
@cindex license documentation
@cindex copying manual

@include gnu-free-documentation-license.texi





@c --- Linux and the GNU system;
@node Linux and the GNU system
@appendix Linux and the GNU system
@include linux-and-the-gnu-system.texi





@c --- Index;
@node Index
@unnumbered Index

@printindex cp

@bye
